/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.carmotorsproject.campaigns.views;

import com.carmotorsproject.campaigns.controller.InspectionController;
import com.carmotorsproject.campaigns.model.Inspection;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author ADMiN
 */
public class InspectionView extends javax.swing.JFrame {

    private static final Logger LOGGER = Logger.getLogger(InspectionView.class.getName());
    private InspectionController controller;
    private DefaultTableModel inspectionTableModel;

    /**
     * Creates new form InspectionView
     */
    public InspectionView() {
        initComponents();
        setupTable();
    }

    /**
     * Sets up the inspection table
     */
    private void setupTable() {
        // This would be implemented with actual table setup code
        // For now, we'll just create a basic model
        String[] columnNames = {"ID", "Vehicle", "Date", "Technician", "Result", "Notes"};
        inspectionTableModel = new DefaultTableModel(columnNames, 0);
        // Assuming there's a JTable component named tblInspections
        // tblInspections.setModel(inspectionTableModel);
    }

    /**
     * Sets the controller for this view
     *
     * @param controller The inspection controller
     */
    public void setController(InspectionController controller) {
        this.controller = controller;
        LOGGER.log(Level.INFO, "Controller set for InspectionView");
    }

    /**
     * Updates the inspection table with the provided list of inspections
     *
     * @param inspections List of inspections to display
     */
    public void updateInspectionTable(List<Inspection> inspections) {
        // Clear existing data
        inspectionTableModel.setRowCount(0);

        // Add new data
        for (Inspection inspection : inspections) {
            Object[] row = {
                    inspection.getInspectionId(),
                    inspection.getVehicleId(), // Would typically show vehicle info
                    inspection.getInspectionDate(),
                    inspection.getTechnicianId(), // Would typically show technician name
                    inspection.getResult(),
                    inspection.getNotes()
            };
            inspectionTableModel.addRow(row);
        }

        LOGGER.log(Level.INFO, "Updated inspection table with {0} inspections", inspections.size());
    }

    /**
     * Shows an error message
     *
     * @param message The error message to display
     */
    public void showError(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
        LOGGER.log(Level.WARNING, "Error shown: {0}", message);
    }

    /**
     * Shows validation errors
     *
     * @param errors Map of field names to error messages
     */
    public void showValidationErrors(Map<String, String> errors) {
        StringBuilder errorMessage = new StringBuilder("Please correct the following errors:\n");

        for (Map.Entry<String, String> entry : errors.entrySet()) {
            errorMessage.append("- ").append(entry.getValue()).append("\n");
        }

        JOptionPane.showMessageDialog(this, errorMessage.toString(), "Validation Errors", JOptionPane.WARNING_MESSAGE);
        LOGGER.log(Level.WARNING, "Validation errors shown: {0}", errors.size());
    }

    /**
     * Shows a success message
     *
     * @param message The success message to display
     */
    public void showSuccess(String message) {
        JOptionPane.showMessageDialog(this, message, "Success", JOptionPane.INFORMATION_MESSAGE);
        LOGGER.log(Level.INFO, "Success message shown: {0}", message);
    }

    /**
     * Populates the inspection form with the provided inspection data
     *
     * @param inspection The inspection data to display
     */
    public void populateInspectionForm(Inspection inspection) {
        // This would populate form fields with inspection data
        // For example:
        // txtInspectionId.setText(String.valueOf(inspection.getInspectionId()));
        // txtVehicleId.setText(String.valueOf(inspection.getVehicleId()));
        // dateChooser.setDate(inspection.getInspectionDate());
        // etc.

        LOGGER.log(Level.INFO, "Populated form with inspection ID: {0}", inspection.getInspectionId());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InspectionView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InspectionView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InspectionView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InspectionView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InspectionView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}